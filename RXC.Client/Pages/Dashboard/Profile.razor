@page "/dashboard/profile"
@layout DashboardLayout
@using System.Net.Http.Headers
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<h3>Profile</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success text-center mb-4">@successMessage</div>
}

@if (profile == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <p><strong>Username:</strong> @profile.UserName</p>
        <p><strong>Total Assets</strong> @profile.TotalAssets</p>
        @foreach (var role in profile.Role)
        {
            <p><strong>Role:</strong> @role</p>
        }
    </div>
}
@code {
    private DTOs.User.Profile? profile;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        successMessage = await JS.InvokeAsync<string>(identifier:"localStorage.getItem", "loginSuccess");
        if (!string.IsNullOrEmpty(successMessage))
        {
            await JS.InvokeVoidAsync(identifier: "localStorage.removeItem", "loginSuccess");
        }

        var token = await JS.InvokeAsync<string>(identifier:"localStorage.getItem", "authToken");

        if (string.IsNullOrEmpty(token))
        {
            Nav.NavigateTo(uri:"/login");
            return;
        }
        try
        {
            Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            profile = await Http.GetFromJsonAsync<DTOs.User.Profile>(requestUri:"api/Dashboard/profile");
        }
        catch (Exception ex)
        {
            Console.WriteLine("API Error: " + ex.Message);
        }
    }

}
